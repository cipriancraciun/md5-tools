#!/dev/null




<< workbench / scratch / initialize
	
	test "${#}" -eq 0
	
	if test ! -d ./.outputs ; then
		if test -h ./.outputs ; then
			_outputs_store="$( exec -- readlink -f -- ./.outputs )"
		else
			_outputs_store="${TMPDIR:-/tmp}/workspace--${UID}--${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}"
		fi
		mkdir -- "${_outputs_store}"
		if test ! -e ./.outputs ; then
			_outputs_store="$( exec -- readlink -e -- "${_outputs_store}" )"
			ln -s -f -T -- "${_outputs_store}" ./.outputs
		fi
	fi
	
	for _folder in rust go rustup cargo ; do
		if test ! -d "./.outputs/${_folder}" ; then
			mkdir -- "./.outputs/${_folder}"
		fi
	done
!!




<< workbench / rustup / initialize
	test "${#}" -eq 0
	test ! -e ./.outputs/rustup/.initialized
	curl -s -o ./.outputs/rustup/rustup-init.tmp -- https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init
	chmod +x -- ./.outputs/rustup/rustup-init.tmp
	mv -n -T -- ./.outputs/rustup/rustup-init.tmp ./.outputs/rustup/rustup-init
	export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.outputs/rustup )"
	export -- CARGO_HOME="$( exec -- readlink -e -- ./.outputs/cargo )"
	nice -n 19 -- ./.outputs/rustup/rustup-init --profile minimal --no-modify-path --quiet -y
	touch -- ./.outputs/rustup/.initialized
!!


<< workbench / rustup / install / targets / x86_64-unknown-linux-gnu
	test "${#}" -eq 0
	"${ZRUN[@]}" ':: workbench / rustup / run' target add -- x86_64-unknown-linux-gnu
!!

<< workbench / rustup / install / targets / x86_64-unknown-linux-musl
	test "${#}" -eq 0
	"${ZRUN[@]}" ':: workbench / rustup / run' target add -- x86_64-unknown-linux-musl
!!

<< workbench / rustup / install / targets / x86_64-apple-darwin
	test "${#}" -eq 0
	"${ZRUN[@]}" ':: workbench / rustup / run' target add -- x86_64-apple-darwin
!!




<< workbench / cargo / run
	export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.outputs/rustup )"
	export -- CARGO_HOME="$( exec -- readlink -e -- ./.outputs/cargo )"
	export -- CARGO_TARGET_DIR="$( exec -- readlink -e -- ./.outputs/rust )"
	export -- PATH="$( exec -- readlink -e -- "${RUSTUP_HOME}/toolchains/stable-x86_64-unknown-linux-gnu/bin" ):$( exec -- readlink -e -- "${CARGO_HOME}/bin" ):${PATH}"
	_rustflags=(
			--remap-path-prefix "$( exec -- readlink -e -- . )=/home/build"
			--remap-path-prefix "$( exec -- readlink -e -- ./sources )=/home/build/sources"
			--remap-path-prefix "$( exec -- readlink -m -- "${HOME}/.cargo/registry/src" )=/home/build/cargo"
			--remap-path-prefix "${HOME}/.cargo/registry/src=/home/build/cargo"
			--remap-path-prefix "$( exec -- readlink -m -- "${CARGO_HOME}/registry/src" )=/home/build/cargo"
			--remap-path-prefix "${CARGO_HOME}/registry/src=/home/build/cargo"
		)
	export -- RUSTFLAGS="${_rustflags[*]}"
	if test -n "${CARGO_CROSS_BIN:-}" ; then
		PATH="$( exec -- readlink -e -- "${CARGO_CROSS_BIN}" ):${PATH}"
	fi
	if test -n "${CARGO_CROSS_RUSTFLAGS:-}" ; then
		RUSTFLAGS="${CARGO_CROSS_RUSTFLAGS} ${RUSTFLAGS}"
	fi
	if test -n "${CARGO_EXTRA_RUSTFLAGS:-}" ; then
		RUSTFLAGS="${CARGO_EXTRA_RUSTFLAGS} ${RUSTFLAGS}"
	fi
	exec -- nice -n 19 -- cargo "${@}"
!!

<< workbench / rustup / run
	export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.outputs/rustup )"
	export -- CARGO_HOME="$( exec -- readlink -e -- ./.outputs/cargo )"
	export -- CARGO_TARGET_DIR="$( exec -- readlink -e -- ./.outputs/rust )"
	export -- PATH="$( exec -- readlink -e -- "${RUSTUP_HOME}/toolchains/stable-x86_64-unknown-linux-gnu/bin" ):$( exec -- readlink -e -- "${CARGO_HOME}/bin" ):${PATH}"
	exec -- nice -n 19 -- rustup "${@}"
!!


:: workbench / cargo / target / x86_64-unknown-linux-gnu :: export -- CARGO_TARGET=x86_64-unknown-linux-gnu
:: workbench / cargo / target / x86_64-unknown-linux-musl :: export -- CARGO_TARGET=x86_64-unknown-linux-musl


##{{
	NOTE:
		https://wapl.es/rust/2019/02/17/rust-cross-compile-linux-to-macos.html
		https://github.com/tpoechtrager/osxcross
		https://github.com/phracker/MacOSX-SDKs
		https://s3.dockerproject.org/darwin/v2/MacOSX10.10.sdk.tar.xz
		https://s3.dockerproject.org/darwin/v2/MacOSX10.11.sdk.tar.xz
##}}

:: workbench / cargo / target / x86_64-apple-darwin :: export -- CARGO_TARGET=x86_64-apple-darwin CARGO_CROSS_BIN=./.outputs/osxcross/bin CARGO_CROSS_RUSTFLAGS='-C linker=x86_64-apple-darwin14-clang -C ar=x86_64-apple-darwin14-ar'

